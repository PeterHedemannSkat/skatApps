


Firsttype
* Moms - månedsafregning
    *  d. 25 i måned for måned-1
        - kan ikke være lørdag/søndag/helligdage
        - dvs. efterfølgende hverdage
    *  exception:
        - for måned 6 (juni) er frist d. 17

    [periods:12]

1. apply generic rules 
    - [{period:{period:0,year:2016},date:DateObj,type:{main:'moms',sub:'monthly'}]
2. look for 2. grade exceptions
3. look for manuel exceptions
    - period 6 -> overwrit 1 og 2 


* Moms - kvartalsafregning 
    * 

-----------------
* data period    type =>

sætter main og sub sammen... hvis sub ikke defineres sættes intet

moms_monthly:12,
moms_quarter:4,
moms_twice:2

askat_large:1
askat_small:1

loonsum_method1:4
loonsum_method3:12
loonsum_method3:4
loonsum_method4:4

----------------

Range for sikre dato fx.  til 31/12-2017

Hvordan ved man når der en exception? Dvs skal sætte exception ind.  


------

moms_monthly:{type:moms_monthly,periods:12,baseMonthDeadline:0,firstPossibleDay:25}
    -- overwrite:{period:5,baseMonthDeadline:0,firstPossibleDay:17}

class Deadline {

    showlist:[]
    from:'1/1-2016'
    to:'31/12-2016' 

    setperiod (from,to) {

    }

    getDeadlineRules (type:string) {

        array
        let data = {
            moms_monthly:{type:moms_monthly,periods:12,baseMonthDeadline:0,firstPossibleDay:25},
            moms_quarter:{type:moms_quarter,periods:4,baseMonthDeadline:3,firstPossibleDay:1},
            moms_twice:{type:moms_twice,periods:2,baseMonthDeadline:3,firstPossibleDay:1},
            loonsum_method_134:{type:loonsum_method134,periods:4,baseMonthDeadline:0,firstPossibleDay:15},  
            loonsum_method_2:{type:loonsum_method1,periods:12,baseMonthDeadline:0,firstPossibleDay:15},
            onestopshop:{type:onestopshop,periods:4,baseMonthDeadline:0,firstPossibleDay:20},
            askat_small:{type:askat_small,periods:12,baseMonthDeadline:0,firstPossibleDay:10},
            askat_large:{type:askat_large,periods:12,baseMonthDeadline:0,firstPossibleDay:'latestweekday'}                  
        }
    }

    add (['moms_monthly','...']) {}

    getDeadlinesforType (rules):deadLine[] {

        var deadLineObj = {}

        // find first period 
        // find last period

        return [{

            type:xx,
            period: {period:0,year:}
            
            date:date Obj

        }]

    }

    getDate (deadLineObj:Deadline) {

        let monthBase = 12 / deadLineObj.periods + deadLineObj.baseMonthDeadline

            



    }
 




}  



------


--------------

1. USER -> [moms_monthly,loonsum_method1] 

2. create deadlineDates for USER for period
    - run 




        /* for moms_maaned -> hvilken frister for moms_maaned ligger lige efter 

            gå tilbage til 

            kender perioderne 1/12 af året 

            28. januar hører til 1. periode af 2016, så skal du angive i d. 25.+ i efterfølgende måned, dvs. den skal med
            ,men fristen af den tidligere måned kan ligge efter DATO, derfor skal den tjekkes


            kvartal 1.jan hører til 1. kvartal 2016, som vi kan slå op har en frist 1. juni


            1. i hvilken periode ligger datoen = 1. periode 2016 
            2. gå tilbage tidligere periode = 12. periode 20

            december 2015, dvs. 12. periode 2015 
            
            0 1 2       0-2      1-3
            3 4 5       3-5      4-6 
            6 7 8       6-8      7-9   
            9 10 11     9-11    10-12

            12/4 = 3

            1 2 3     



            12/1 -> 12/4 -> 12/8 12/12 


            1 - 2016     6 - 2017

            1 - 2016

            2 - 2016

        
         */

         3 
         2 -1 year
         1 -2

         4 -3 year-1
         3 -4
         2 -5
         1 -6

         4 -7 year-2
         3 -8
         2 -9
         1 -10

         REST = moves - (period - 1)
         10 - (3-1) = 8 
         2 - (3-1) = 0 

         year = year - Math.ceil(REST/periods)
         mod =  (REST % periods)
         period = 1 + [0,3,2,1].indexOf(mod)

         1  0  4 
         2  3  3
         3  2  2
         4  1  1


         2 +12
         1 +11 year + 3

         4 +10
         3 +9
         2 +8
         1 +7 year + 2 [e]

         4 +6
         3 +5
         2 +4
         1 +3  year + 1   [year 0-1]

         4 +2
         3 +1
         2

        
         REST = moves - (periods - period) = 10 

         year = year + Math.ceil(REST/periods)

        REST < 0 => [year SAME,period = periods + (REST)]

        let year = (REST > 0) ? Math.floor

         10 % 4 = 2
         Math.floor = 10/4 = 2 

         year 


         
         1  + 1
 
         12

         fra NU - NU + (X dage afhængig af antal pligter valgt)

            1. Hvis over 10 elementer
                a. viser array 0-9 og gemmer array over 9 i catch
                b. state = Fra Dato -> til dato = index 9's dato (ved klik på >)   
                    gemmer id'er (eg. moms_maaned + periode object) Ny type på dem der ER vist 

                    hvis dato of index 9 og 10

                    array af de første 10 

            

            Fra-dato er kendt 

            Til-dato 

